-- @nsURI MM=http://www.eclipse.org/uml2/5.0.0/UML
-- 
module AddForeignKeysToAssociations;
create OUT : MM refining IN : MM;
-- 
-- 
--helper context MM!Class def : hasField(fieldName : String) : Boolean =
--    self.ownedAttribute->exists(attr | attr.name = fieldName);
-- 
--helper context MM!Class def : compositeAssociations : Sequence(MM!Association) =
--    MM!Association.allInstances()->select(assoc |
--        assoc.ownedEnd->exists(end | end.aggregation = 'composite' and end.type = self)
--    );	
-- 
--helper context MM!Class def : isASuperclass(): Boolean = 
--	MM!Association.allInstances()->exists(assoc | 
--		assoc.ownedEnd->exists(end |
--			end.aggregation = 'composite' and end.type = self
--			)
--		);
-- 
--helper def : getAssociation(clazz : MM!Class) : MM!Association =
--    MM!Association.allInstances()->select(assoc | 
--        assoc.ownedEnd->exists(end |
--            end.aggregation = #composite and end.type = clazz
--        )
--    )->first();
-- 
--helper def : createForeignKey(assoc : MM!Association) : MM!Property = 
--	MM!Property.allInstances()->first().createOwnedClass('fk', true);
-- 
----helper def : createFK(inp : MM!Property) : String = 'fk';
-- 
--rule rule1 {
--	from
--		inp : MM!Property(
--			inp.owner.oclIsTypeOf(MM!Association) 
--				and 
--			inp.aggregation = #composite
--		)
--	to 
-- 
--        out : MM!Property (
--            name <- inp.name + '_fk',
--            type <- inp.type,
--			visibility <- inp.visibility,
--			association <- inp.association,
--			aggregation <- inp.aggregation
--		)
--}
-- 
--helper def : propertyExists(class: MM!Class) : Boolean = 
--	MM!Property.allInstances()->exists(prop | 
--		prop.name.oclIsTypeOf(String)
--			and
--		prop.name.size() > 3
--			and
--		prop.aggregation = #composite 
--			and 
--		prop.name.substring(1, prop.name.size() - 3).toLower() = class.name.toLower()
--			and
--		prop.owner.oclIsTypeOf(MM!Association));
-- 
-- 
--helper def : grabProperty(class: MM!Class) : MM!Property = 
--	MM!Property.allInstances()->select(prop |
--		prop.name.oclIsTypeOf(String)
--			and	
--		prop.name.size() > 3
--			and
--		prop.aggregation = #composite 
--			and 
--		prop.name.substring(1, prop.name.size() - 3).toLower() = class.name.toLower()
--			and
--		prop.owner.oclIsTypeOf(MM!Association)	
--	)->first();
-- 
-- 
--rule rule2 {
--	from
--		inp : MM!Class (
--			thisModule.propertyExists(inp)
--		)
--	to 
--		out : MM!Class (
--			ownedAttribute <- '1'
--		)
--}
 
helper def : checkIfClassHasEmptyAttr(c : MM!Class) : Boolean = 
	MM!Property.allInstances()->exists(prop | prop.owner.oclIsTypeOf(MM!Association) and 
		prop.name.startsWith(c.name.toString()) and 
		c.ownedAttribute.asSequence().includes(prop));
			
helper def: createEmptyAttribute() : MM!Property = 
    MM!Property.newInstance();
			
rule addAttributeToClass {
	from
		c : MM!Class (thisModule.checkIfClassHasEmptyAttr(c))
	to
		outC : MM!Class (
			ownedAttribute <- thisModule.createEmptyAttribute()
		)
}














